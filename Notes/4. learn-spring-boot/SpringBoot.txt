Before Spring Boot!

	Setting up Spring Projects before Spring Boot was NOT easy!
	
		1: Dependency Management (pom.xml)
		2: Define Web App Configuration (web.xml)
		3: Manage Spring Beans (context.xml)
		4: Implement Non Functional Requirements (NFRs)
		
	AND repeat this for every new project!
	
	Typically takes a few days to setup for each project (and countless hours to maintain)

---------------------------------------------------------------------------------------------------------------------------

Most Important Goal of Spring Boot

	Help you build PRODUCTION-READY apps QUICKLY
	
		Build QUICKLY
		
			Spring Initializer
			Spring Boot Starter Projects
			Spring Boot Auto Configuration
			Spring Boot DevTools
			
		Be PRODUCTION-READY
		
			Logging
			Different Configuration for Different Environments
			Profiles, ConfigurationProperties
			Monitoring (Spring Boot Actuator)
			
---------------------------------------------------------------------------------------------------------------------------

Spring Boot Starter Projects

	I need a lot of frameworks to build application features:
	
		Build a REST API: I need Spring, Spring MVC, Tomcat, JSON conversion...
		Write Unit Tests: I need Spring Test, JUnit, Mockito, ...
		
	How can I group them and make it easy to build applications?
		Starters: Convenient dependency descriptors for different features
		
	Spring Boot provides variety of starter projects:
	
		Web Application & REST API - Spring Boot Starter Web (spring-webmvc, spring-web, spring-boot-starter-tomcat, 
		spring-boot-starter-json)
		
		Unit Tests - Spring Boot Starter Test
		
		Talk to database using JPA - Spring Boot Starter Data JPA
		
		Talk to database using JDBC - Spring Boot Starter JDBC
		
		Secure your web application or REST API - Spring Boot Starter Security

---------------------------------------------------------------------------------------------------------------------------

Spring Boot Auto Configuration

	I need lot of configuration to build Spring app:
		Component Scan, DispatcherServlet, Data Sources, JSON Conversion, ...
		
	How can I simplify this?
	
		Auto Configuration: Automated configuration for your app
		
			Decided based on:
			
				Which frameworks are in the Class Path?
				What is the existing configuration (Annotations etc)?
				
	Example: Spring Boot Starter Web
	
		Dispatcher Servlet (DispatcherServletAutoConfiguration)
		
		Embedded Servlet Container - Tomcat is the default (EmbeddedWebServerFactoryCustomizerAutoConfiguration)
		
		Default Error Pages (ErrorMvcAutoConfiguration)
		
		Bean<->JSON (JacksonHttpMessageConvertersConfiguration)

---------------------------------------------------------------------------------------------------------------------------

The Glue - @SpringBootApplication

	Questions:
	
		Who is launching the Spring Context?
		Who is triggering the component scan?
		Who is enabling auto configuration?
		
	Answer: @SpringBootApplication
	
		1: @SpringBootConfiguration: Indicates that a class provides Spring Boot application @Configuration.
		
		2: @EnableAutoConfiguration: Enable auto-configuration of the Spring Application Context,
		
		3: @ComponentScan: Enable component scan (for current package, by default)

---------------------------------------------------------------------------------------------------------------------------

Build Faster with Spring Boot DevTools

	Increase developer productivity
	
	Why do you need to restart the server manually for every code change?
	
	Remember: For pom.xml dependency changes, you will need to restart server manually

---------------------------------------------------------------------------------------------------------------------------

Managing App. Configuration using Profiles

	Applications have different environments: Dev, QA, Stage, Prod, ...
	
	Different environments need different configuration:
	
		Different Databases
		Different Web Services

	How can you provide different configuration for different environments?
	
		Profiles: Environment specific configuration
		
	How can you define externalized configuration for your application?
		ConfigurationProperites: Define externalized configuration

	Levels of Logging in spring-boot-devtools -
		trace
		debug
		info
		warning
		error
		off
		
---------------------------------------------------------------------------------------------------------------------------

Deployment with Spring Boot Embedded Servers

	How do you deploy your application?
	
		Step 1 : Install Java
		
		Step 2 : Install Web/Application Server
		
			Tomcat/WebSphere/WebLogic etc
			
		Step 3 : Deploy the application WAR (Web ARchive)
		
			This is the OLD WAR Approach
			Complex to setup!
			
	Embedded Server - Simpler alternative
	
		Step 1 : Install Java
		
		Step 2 : Run JAR file
		
		Make JAR not WAR (Credit: Josh Long!)
		
		Embedded Server Examples:
		
			spring-boot-starter-tomcat
			spring-boot-starter-jetty
			spring-boot-starter-undertow
		
---------------------------------------------------------------------------------------------------------------------------

Monitor Applications using Spring Boot Actuator

	Monitor and manage your application in your production
	
	Provides a number of endpoints:
	
		beans - Complete list of Spring beans in your app
		health - Application health information
		metrics - Application metrics
		mappings - Details around Request Mappings
	
	In aaplication.properties, Examples--
	
	management.endpoints.web.exposure.include=health,metrics
	management.endpoints.web.exposure.include=*
	
---------------------------------------------------------------------------------------------------------------------------

Understanding Spring Boot vs Spring MVC vs Spring

	Spring Boot vs Spring MVC vs Spring: What's in it?
	
		Spring Framework: Dependency Injection
		
			@Component, @Autowired, Component Scan etc..
			
			Just Dependency Injection is NOT suicient (You need other frameworks to build apps)
				Spring Modules and Spring Projects: Extend Spring Eco System
					Provide good integration with other frameworks (Hibernate/JPA, JUnit & Mockito for Unit Testing)
			
		Spring MVC (Spring Module): Simplify building web apps and REST API
		
			Building web applications with Struts was very complex
			@Controller, @RestController, @RequestMapping("/courses")
			
		Spring Boot (Spring Project): Build PRODUCTION-READY apps QUICKLY
		
			Starter Projects - Make it easy to build variety of applications
			
			Auto configuration - Eliminate configuration to setup Spring, Spring MVC and other frameworks!
			
			Enable non functional requirements (NFRs):
			
				Actuator: Enables Advanced Monitoring of applications
				Embedded Server: No need for separate application servers!
				Logging and Error Handling
				Profiles and ConfigurationProperties
		
---------------------------------------------------------------------------------------------------------------------------
	








		
		
		
		
		
