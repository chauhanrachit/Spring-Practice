For JWT

	In com.practice.rest.webservices.restfulwebservices.jwt
		
		@RestController
		public class JwtAuthenticationController {
			
			private final JwtTokenService tokenService;
			
			private final AuthenticationManager authenticationManager;

			public JwtAuthenticationController(JwtTokenService tokenService, 
					AuthenticationManager authenticationManager) {
				this.tokenService = tokenService;
				this.authenticationManager = authenticationManager;
			}

			@PostMapping("/authenticate")
			public ResponseEntity<JwtTokenResponse> generateToken(
					@RequestBody JwtTokenRequest jwtTokenRequest) {
				
				var authenticationToken = 
						new UsernamePasswordAuthenticationToken(
								jwtTokenRequest.username(), 
								jwtTokenRequest.password());
				
				var authentication = 
						authenticationManager.authenticate(authenticationToken);
				
				var token = tokenService.generateToken(authentication);
				
				return ResponseEntity.ok(new JwtTokenResponse(token));
			}
		}
		
	===============================================================================================
		@Configuration
		@EnableWebSecurity
		@EnableMethodSecurity
		public class JwtSecurityConfig {

			@Bean
			public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity, HandlerMappingIntrospector introspector) throws Exception {
				
				// h2-console is a servlet 
				// https://github.com/spring-projects/spring-security/issues/12310
				return httpSecurity
						.authorizeHttpRequests(auth -> auth
							.requestMatchers("/authenticate").permitAll()
		//                    Lower line commented to move from H2 TO MySQL
		//                    .requestMatchers(PathRequest.toH2Console()).permitAll() // h2-console is a servlet and NOT recommended for a production
							.requestMatchers(HttpMethod.OPTIONS,"/**")
							.permitAll()
							.anyRequest()
							.authenticated())
						.csrf(AbstractHttpConfigurer::disable)
						.sessionManagement(session -> session.
							sessionCreationPolicy(SessionCreationPolicy.STATELESS))
						.oauth2ResourceServer(
								OAuth2ResourceServerConfigurer::jwt)
						.httpBasic(
								Customizer.withDefaults())
						.headers(header -> {header.
							frameOptions().sameOrigin();})
						.build();
			}

			@Bean
			public AuthenticationManager authenticationManager(
					UserDetailsService userDetailsService) {
				var authenticationProvider = new DaoAuthenticationProvider();
				authenticationProvider.setUserDetailsService(userDetailsService);
				return new ProviderManager(authenticationProvider);
			}

			@Bean
			public UserDetailsService userDetailsService() {
				UserDetails user = User.withUsername("Rachit")
										.password("{noop}pass")
										.authorities("read")
										.roles("USER")
										.build();

				return new InMemoryUserDetailsManager(user);
			}

			@Bean
			public JWKSource<SecurityContext> jwkSource() {
				JWKSet jwkSet = new JWKSet(rsaKey());
				return (((jwkSelector, securityContext) 
								-> jwkSelector.select(jwkSet)));
			}

			@Bean
			JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwkSource) {
				return new NimbusJwtEncoder(jwkSource);
			}

			@Bean
			JwtDecoder jwtDecoder() throws JOSEException {
				return NimbusJwtDecoder
						.withPublicKey(rsaKey().toRSAPublicKey())
						.build();
			}
			
			@Bean
			public RSAKey rsaKey() {
				
				KeyPair keyPair = keyPair();
				
				return new RSAKey
						.Builder((RSAPublicKey) keyPair.getPublic())
						.privateKey((RSAPrivateKey) keyPair.getPrivate())
						.keyID(UUID.randomUUID().toString())
						.build();
			}

			@Bean
			public KeyPair keyPair() {
				try {
					var keyPairGenerator = KeyPairGenerator.getInstance("RSA");
					keyPairGenerator.initialize(2048);
					return keyPairGenerator.generateKeyPair();
				} catch (Exception e) {
					throw new IllegalStateException(
							"Unable to generate an RSA Key Pair", e);
				}
			}
			
		}
	===============================================================================================
		package com.practice.rest.webservices.restfulwebservices.jwt;
		public record JwtTokenRequest(String username, String password) {}
	===============================================================================================
		package com.practice.rest.webservices.restfulwebservices.jwt;
		public record JwtTokenResponse(String token) {}
	===============================================================================================
		@Service
		public class JwtTokenService {
			
			private final JwtEncoder jwtEncoder;

			public JwtTokenService(JwtEncoder jwtEncoder) {
				this.jwtEncoder = jwtEncoder;
			}

			public String generateToken(Authentication authentication) {

				var scope = authentication
								.getAuthorities()
								.stream()
								.map(GrantedAuthority::getAuthority)
								.collect(Collectors.joining(" "));

				var claims = JwtClaimsSet.builder()
								.issuer("self")
								.issuedAt(Instant.now())
								.expiresAt(Instant.now().plus(90, ChronoUnit.MINUTES))
								.subject(authentication.getName())
								.claim("scope", scope)
								.build();

				return this.jwtEncoder
						.encode(JwtEncoderParameters.from(claims))
						.getTokenValue();
			}
		}
	===============================================================================================
	In data.sql
	
		INSERT INTO todo (ID, DESCRIPTION, DONE, TARGET_DATE, USERNAME)
		VALUES (10001, 'LEARN AWS', false, CURRENT_DATE(), 'rachit');

		INSERT INTO todo (ID, DESCRIPTION, DONE, TARGET_DATE, USERNAME)
		VALUES (10002, 'LEARN SpringBoot', false, CURRENT_DATE(), 'rachit');

		INSERT INTO todo (ID, DESCRIPTION, DONE, TARGET_DATE, USERNAME)
		VALUES (10003, 'LEARN SpringSecurity', false, CURRENT_DATE(), 'rachit');
		
	===============================================================================================
	
	In /restful-web-services/src/main/java/com/practice/rest/webservices/restfulwebservices/todo/TodoJpaResource.java
	
		@RestController
		public class TodoJpaResource {
			
			private TodoRepository todoRepository;
			
			public TodoJpaResource(TodoRepository todoRepository) {
				this.todoRepository=todoRepository;
			}
			
			@GetMapping("/users/{username}/todos")
			public List<Todo> retrieveTodos(@PathVariable String username) {
				return todoRepository.findByUsername(username);
			}
			
			@GetMapping("/users/{username}/todos/{id}")
			public Todo retrieveTodo(@PathVariable String username, @PathVariable int id) {
				return todoRepository.findById(id).get();
			}
			
			@DeleteMapping("/users/{username}/todos/{id}")
			public ResponseEntity<Void> deleteTodo(@PathVariable String username, @PathVariable int id) {
				todoRepository.deleteById(id);
				return ResponseEntity.noContent().build();
			}
			
			@PutMapping("/users/{username}/todos/{id}")
			public Todo updateTodo(@PathVariable String username, @PathVariable int id, @RequestBody Todo todo) {
				todoRepository.save(todo);
				return todo;
			}

			@PostMapping("/users/{username}/todos")
			public Todo createTodo(@PathVariable String username, @RequestBody Todo todo) {
				todo.setUsername(username);
				todo.setId(null);
				return todoRepository.save(todo);
			}
		}
	===============================================================================================
	In TodoRepository.java
		public interface TodoRepository extends JpaRepository <Todo, Integer>{
			List<Todo> findByUsername (String username);
		}
	
	===============================================================================================
	In application.properties
	
		spring.application.name=restful-web-services
		#spring.h2.console.enabled=true
		#spring.datasource.url=jdbc:h2:mem:testdb
		spring.jpa.defer-datasource-initialization=true

		#Lower line added to forcefully execute data.sql as it was not adding data to the db, but it is causing some issue with JWT auth
		#spring.sql.init.mode=always
		#For MySql DB(Docker) 
		#If we are connecting with real database like MySql, SpringBoot will not create table for us. 
		#If we want it to create table at startup- 
		spring.jpa.hibernate.ddl-auto=update
		#Properties of MySql DB 
		spring.datasource.url=jdbc:mysql://localhost:3306/todos
		spring.datasource.username=todos-user
		spring.datasource.password=dummytodos
		spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
		 
		#To run (or create & run) The docker container of sql, in cmd write the command - 
		#(Launch MySQL using Docker) - 
		#	docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 mysql:8-oracle

		#Download mysqlsh
		#after download, in cmd write - mysqlsh
		#after that - \connect todos-user@localhost:3306
		#\sql
		#use todos
		#select * from todo;
		#\quit 
		 
		#todos-user@localhost:3306
	===============================================================================================
	In pom.xml
		
		<!--<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>-->
		
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
		</dependency> 
	===============================================================================================