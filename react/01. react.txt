React Developer Tools - Chrome Extension

	Chrome Developer Tools extension for React
	
	Goal: Inspect React Component Hierarchies
	
	Components tab shows:
		Root React components
		Sub components that were rendered
		
	For each component, you can see and edit
		props
		state
		
	Useful for:
		Understanding and Learning React
		Debugging problems

--------------------------------------------------------------------------------------------------------------------
Todo Management React App - First Steps
	
	1: Counter example - What did we learn?
		Basics of Components
			View (JSX)
			Styling (CSS)
			State
			Props
		
	2: Todo Management App - What will we learn?
		Routing
		Forms
		Validation
		REST API calls
		Authentication
		& a lot more...
--------------------------------------------------------------------------------------------------------------------
Getting Started with Todo App - Components

	Starting with your TodoApp
		1: LoginComponent
			Make LoginComponent Controlled
				Link form fields with state
			Implement Hard-coded Authentication
			Implement Conditional Rendering
		2: WelcomeComponent
			Implement Routing
		3: ErrorComponent
		4: ListTodosComponent
		5: Add Bootstrap & style our pages
		6: HeaderComponent
		7: FooterComponent
		8: LogoutComponent
		
--------------------------------------------------------------------------------------------------------------------
In App.js --
	
	import './App.css';
	import TodoApp from './components/todo/TodoApp';
	function App() {
	  return(
		<div className="App">
		  <TodoApp />
		</div>
	  )
	}
	export default App;
	
In src\components\todo\
	
	In src\components\todo\TodoApp.jsx
		
		import { useState } from "react"
		export default function TodoApp() {
			return(
				<div className="TodoApp">
					<LoginComponent />
					{/* <WelcomeComponent /> */}
				</div>
			)
		}
		function LoginComponent() {
			const [username,setUsername] =useState('rachit');
			const [password,setPassword] =useState('');
			const [showSuccessMessage,setShowSuccessMessage] =useState(false);
			const [showErrorMessage,setShowErrorMessage] =useState(false);
			function handleUserNameChange(event){
				// console.log(event);
				// console.log(event.target.value);
				setUsername(event.target.value);
			}
			function handlePasswordChange(event){
				setPassword(event.target.value);
			}
			function handleSubmit(){
				if(username==='rachit' && password==='rachit'){
					console.log('success');
					setShowSuccessMessage(true);
					setShowErrorMessage(false);
				}
				else {
					console.log('failed');
					setShowSuccessMessage(false);
					setShowErrorMessage(true);
				}
			}
			function SuccessMessageComponont(){
				if(showSuccessMessage){
					return <div className="successMessage">Authenticated Successfully.</div>
				}
				return null
			}
			function ErrorMessageComponont(){
				if(showErrorMessage){
					return <div className="errorMessage">Authenticatation Failed. Please ckeck your credentials.</div>
				}
				return null
			}
			return(
				<div className="Login">
					<SuccessMessageComponont />
                    <ErrorMessageComponont />
					<div className="LoginForm">
						<div>
							<label>User Name</label>
							<input type="text" name="username" value={username} onChange={handleUserNameChange}/>
						</div>
						<div>
							<label>Password</label>
							<input type="password" name="password" value={password} onChange={handlePasswordChange}/>
						</div>
						<div>
							<button type="button" name="login" onClick={handleSubmit}>Login</button>
						</div>
					</div>
				</div>
			)
		}
		function WelcomeComponent() {
			return(
				<div className="Welcome">Welcome Component</div>
			)
		}

	src\components\todo\TodoApp.css
		
		label, input, button {
			margin: 10px;
			padding: 5px;
		}
--------------------------------------------------------------------------------------------------------------------
In TodoApp.jsx

	import { useState } from "react"
	export default function TodoApp() {
		return(
			<div className="TodoApp">
				<LoginComponent />
				{/* <WelcomeComponent /> */}
			</div>
		)
	}
	function LoginComponent() {
		const [username,setUsername] =useState('rachit');
		const [password,setPassword] =useState('');
		const [showSuccessMessage,setShowSuccessMessage] =useState(false);
		const [showErrorMessage,setShowErrorMessage] =useState(false);
		function handleUserNameChange(event){
			// console.log(event);
			// console.log(event.target.value);
			setUsername(event.target.value);
		}
		function handlePasswordChange(event){
			setPassword(event.target.value);
		}
		function handleSubmit(){
			if(username==='rachit' && password==='rachit'){
				// console.log('success');
				setShowSuccessMessage(true);
				setShowErrorMessage(false);
			}
			else {
				// console.log('failed');
				setShowSuccessMessage(false);
				setShowErrorMessage(true);
			}
		}
		/*
		In Browser Console 
			>  true && 'rachit'
			<. 'rachit'
			>  false && 'rachit'
			<. false
		*/
		// function SuccessMessageComponont(){
		//     if(showSuccessMessage){
		//         return <div className="successMessage">Authenticated Successfully.</div>
		//     }
		//     return null
		// }

		// function ErrorMessageComponont(){
		//     if(showErrorMessage){
		//         return <div className="errorMessage">Authenticatation Failed. Please ckeck your credentials.</div>
		//     }
		//     return null
		// }
		return(
			<div className="Login">
				{/* <SuccessMessageComponont />
				<ErrorMessageComponont /> */}
				{showSuccessMessage && <div className="successMessage">Authenticated Successfully.</div> }
				{showErrorMessage && <div className="errorMessage">Authenticatation Failed. Please ckeck your credentials.</div> }
				<div className="LoginForm">
					<div>
						<label>User Name</label>
						<input type="text" name="username" value={username} onChange={handleUserNameChange}/>
					</div>
					<div>
						<label>Password</label>
						<input type="password" name="password" value={password} onChange={handlePasswordChange}/>
					</div>
					<div>
						<button type="button" name="login" onClick={handleSubmit}>Login</button>
					</div>
				</div>
			</div>
		)
	}
	function WelcomeComponent() {
		return(
			<div className="Welcome">Welcome Component</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------
In cmd console -
	
		npm install react-router-dom
	
	It is not working, so -->
	
		yarn add react-router-dom
	

In TodoApp.jsx

	import { useState } from "react"
	import './TodoApp.css';
	import { BrowserRouter, Route, Routes, useNavigate } from "react-router-dom";

	export default function TodoApp() {
		return(
			<div className="TodoApp">
				<BrowserRouter>
					<Routes>
						<Route path ='/' element={<LoginComponent />} ></Route>
						<Route path ='/login' element={<LoginComponent />} ></Route>
						<Route path ='/welcome' element={<WelcomeComponent />} ></Route>
						<Route path ='*' element={<ErrorComponent />} ></Route>
					</Routes>
				</BrowserRouter>
			</div>
		)
	}

	function LoginComponent() {
		const [username,setUsername] =useState('rachit');
		const [password,setPassword] =useState('');
		const [showSuccessMessage,setShowSuccessMessage] =useState(false);
		const [showErrorMessage,setShowErrorMessage] =useState(false);

		const navigate = useNavigate();

		function handleUserNameChange(event){
			setUsername(event.target.value);
		}
		function handlePasswordChange(event){
			setPassword(event.target.value);
		}
		function handleSubmit(){
			if(username==='rachit' && password==='rachit'){
				setShowSuccessMessage(true);
				setShowErrorMessage(false);
				navigate('/welcome');
			}
			else {
				setShowSuccessMessage(false);
				setShowErrorMessage(true);
			}
		}
		/*
		In Browser Console 
			>  true && 'rachit'
			<. 'rachit'
			>  false && 'rachit'
			<. false
		*/
		// function SuccessMessageComponont(){
		//     if(showSuccessMessage){
		//         return <div className="successMessage">Authenticated Successfully.</div>
		//     }
		//     return null
		// }

		// function ErrorMessageComponont(){
		//     if(showErrorMessage){
		//         return <div className="errorMessage">Authenticatation Failed. Please ckeck your credentials.</div>
		//     }
		//     return null
		// }
		return(
			<div className="Login">
				<h1>Login Page</h1>
				{/* <SuccessMessageComponont />
				<ErrorMessageComponont /> */}
				{showSuccessMessage && <div className="successMessage">Authenticated Successfully.</div> }
				{showErrorMessage && <div className="errorMessage">Authenticatation Failed. Please ckeck your credentials.</div> }
				<div className="LoginForm">
					<div>
						<label>User Name</label>
						<input type="text" name="username" value={username} onChange={handleUserNameChange}/>
					</div>
					<div>
						<label>Password</label>
						<input type="password" name="password" value={password} onChange={handlePasswordChange}/>
					</div>
					<div>
						<button type="button" name="login" onClick={handleSubmit}>Login</button>
					</div>
				</div>
			</div>
		)
	}
	function WelcomeComponent() {
		return(
			<div className="WelcomeComponent">
				<h1>Welcome</h1>
				<div>Welcome Component</div>
			</div>
		)
	}
	function ErrorComponent() {
		return(
			<div className="ErrorComponent">
				<h1>We are working really hard!</h1>
				<div>
					Apologies for the 404. Reach out to our team at ABC-DEF-_GHIJ.
				</div>
			</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------
Changes in TodoApp.jsx 
	
	export default function TodoApp() {
		return(
			<div className="TodoApp">
				<BrowserRouter>
					<Routes>
						<Route path ='/' element={<LoginComponent />} ></Route>
						<Route path ='/login' element={<LoginComponent />} ></Route>
						<Route path ='/welcome/:username' element={<WelcomeComponent />} ></Route>
						<Route path ='*' element={<ErrorComponent />} ></Route>
					</Routes>
				</BrowserRouter>
			</div>
		)
	}
	function LoginComponent() {
		const [username,setUsername] =useState('rachit');
		const [password,setPassword] =useState('');
		const [showSuccessMessage,setShowSuccessMessage] =useState(false);
		const [showErrorMessage,setShowErrorMessage] =useState(false);
		const navigate = useNavigate();
		function handleUserNameChange(event){
			setUsername(event.target.value);
		}
		function handlePasswordChange(event){
			setPassword(event.target.value);
		}
		function handleSubmit(){
			if(username==='rachit' && password==='rachit'){
				setShowSuccessMessage(true);
				setShowErrorMessage(false);
				navigate(`/welcome/${username}`);
			}
			else {
				setShowSuccessMessage(false);
				setShowErrorMessage(true);
			}
		}
		return(
			<div className="Login">
				<h1>Login Page</h1>
				{showSuccessMessage && <div className="successMessage">Authenticated Successfully.</div> }
				{showErrorMessage && <div className="errorMessage">Authenticatation Failed. Please ckeck your credentials.</div> }
				<div className="LoginForm">
					<div>
						<label>User Name</label>
						<input type="text" name="username" value={username} onChange={handleUserNameChange}/>
					</div>
					<div>
						<label>Password</label>
						<input type="password" name="password" value={password} onChange={handlePasswordChange}/>
					</div>
					<div>
						<button type="button" name="login" onClick={handleSubmit}>Login</button>
					</div>
				</div>
			</div>
		)
	}
	function WelcomeComponent() {
		// const params = useParams();
		// console.log(params.username);
		const {username} = useParams();
		console.log(username);

		return(
			<div className="WelcomeComponent">
				<h1>Welcome {username}</h1>
				<div>Welcome Component</div>
			</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------
In TodoApp.jsx
	
	//Change in Routes in export default function 
				<Routes>
                    <Route path ='/' element={<LoginComponent />} />
                    <Route path ='/login' element={<LoginComponent />} />
                    <Route path ='/welcome/:username' element={<WelcomeComponent />} />
                    <Route path ='/todos' element={<ListTodosComponent />} />
                    <Route path ='*' element={<ErrorComponent />} />
                </Routes>
				
	function WelcomeComponent() {
		// const params = useParams();
		// console.log(params.username);
		const {username} = useParams();
		console.log(username);

		return(
			<div className="WelcomeComponent">
				<h1>Welcome {username}</h1>
				<div>
					{/* Manage Your Todos <a href="/todos">Go Here</a> */}
					{/* Not a Good approach as it refreshes the entire page 
						When we are building single page application, we don't want the entire
						page to be refreshed, only the specific component which is changing to be refreshed.
						That is why we will use Link tag from react-router-dom */}
					Manage Your Todos <Link to='/todos'>Go Here</Link>
				</div>
			</div>
		)
	}
	// >  todos.forEach(element => console.log(element))
	// VM818:1 {id: 1, description: 'Learn AWS'}
	// VM818:1 {id: 2, description: 'Learn Full Stack Dev'}
	// VM818:1 {id: 3, description: 'Learn DevOps'}
	// >  todos.map(element => element.id)
	// <. (3)[1, 2, 3]
	function ListTodosComponent() {

		const today = new Date ()
		const targetDate = new Date (today.getFullYear()+2 , today.getMonth(), today.getDay())

		const todos = [
					{id: 1, description: 'Learn AWS', done: false, targetDate:targetDate },
					{id: 2, description: 'Learn Full Stack Dev' , done: false, targetDate:targetDate },
					{id: 3, description: 'Learn DevOps' , done: false, targetDate:targetDate }
				]
		return(
			<div className="ListTodosComponent">
				<h1>Things you want to Do!</h1>
				<div>
					<table>
						<thead>
							<tr>
								<td>ID</td>
								<td>Description</td>
								<td>Is Done ?</td>
								<td>Target Date</td>
							</tr>
						</thead>
						<tbody>
							{ 
								todos.map(
									todo => (
										<tr key = {todo.id} >
											<td>{todo.id}</td>
											<td>{todo.description}</td>
											<td>{todo.done.toString()}</td>
											<td>{todo.targetDate.toDateString()}</td>
										</tr>
									)
								)
							}
						</tbody>
					</table>
				</div>
			</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------
In TodoApp.jsx
	
	//In export default Function
			<HeaderComponent />

            <BrowserRouter>
                <Routes>
                    <Route path ='/' element={<LoginComponent />} />
                    <Route path ='/login' element={<LoginComponent />} />
                    <Route path ='/welcome/:username' element={<WelcomeComponent />} />
                    <Route path ='/todos' element={<ListTodosComponent />} />
                    <Route path ='/logout' element={<LogoutComponent />} />
                    <Route path ='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
            
            <FooterComponent />
	//		
	
	function HeaderComponent() {
		return(
			<div className="header">
				Header <hr/>
			</div>
		)
	}
	function FooterComponent() {
		return(
			<div className="footer">
				<hr/> Footer
			</div>
		)
	}
	function LogoutComponent() {
		return(
			<div className="LogoutComponent">
				<h1>You are logged out!</h1>
				<div>
					Thank You for using our app. Come back soon!
				</div>
			</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------
in Cmd console-
		
		npm install bootstrap
		
	But since we are not using -
	
		yarn add bootstrap
		
--------------------------------------------------------------------------------------------------------------------
Create a Separate Component File for each component
	
	HeaderComponent.jsx --
		
		import {Link} from "react-router-dom";
		export default HeaderComponent;
		function HeaderComponent() {
			return(
				<header className="border-bottom border-light border-5 mb-5 p-2">
					<div className="container">
						<div className="row">
							<nav className="navbar navbar-expand-lg">
								<a className="navbar-brand ms-2 fs-2 fw-bold text-black" href="https://www.google.com">google</a>
								<div className="collapse navbar-collapse">
									<ul className="navbar-nav">
										<li className="nav-item  fs-5">
											<Link className="nav-link" to="/welcome/rachit">Home</Link>
										</li>
										<li className="nav-item  fs-5">
											<Link className="nav-link" to="/todos">Todos</Link>
										</li>
									</ul>
								</div>
								<ul className="navbar-nav">
									<li className="nav-item fs-5">
										<Link className="nav-link" to="/login">Login</Link>
									</li>
									<li className="nav-item fs-5">
										<Link className="nav-link" to="/logout">Logout</Link>
									</li>
								</ul>
							</nav>
						</div>    
					</div>
				</header>
			)
		}
		/*
		function HeaderComponent() {
			return(
				<header className="header">
					<div className="container">
						<ul className="navbar-nav">
							
							<li className="nav-item">
								<a className="nav-link" href="https://www.google.com">google</a>
							</li>

							<li className="nav-item">
								<Link className="nav-link" to="/welcome/rachit">Home</Link>
							</li>
							<li className="nav-item">
								<Link className="nav-link" to="/todos">Todos</Link>
							</li>

							<li className="nav-item">
								<Link className="nav-link" to="/logout">Logout</Link>
							</li>
							<li className="nav-item">
								<Link className="nav-link" to="/login">Login</Link>
							</li>

						</ul>
					</div>
				</header>
			)
		}
		*/
	
	FooterComponent.jsx --
		
		export default FooterComponent;
		function FooterComponent() {
			return (
				<footer className="footer">
					<div className="container">
						Your Footer
					</div>
				</footer>
			);
		}
		
--------------------------------------------------------------------------------------------------------------------