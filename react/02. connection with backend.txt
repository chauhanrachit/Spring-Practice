Create a project with basic helloworld, todo rest api, from the previous projects.
	
	In WelcomeComponent.jsx
		
		function WelcomeComponent() {
			const {username} = useParams();
			function callHelloWorldRestApi(){
			}
			return(
				<div className="WelcomeComponent">
					<h1>Welcome {username}</h1>
					<div>
						Manage Your Todos <Link to='/todos'>Go Here</Link>
					</div>
					<div>
						<button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>Call Hello World</button>
					</div>
				</div>
			)
		}
		
To call REST API-
	
	One of the most popular frameword used along with react to call REST API is called 'Axios'
	
	To make use of Axios, we need to add a dependency for axios
		
		In cmd prompt, where react frotend in executing --
			
			npm install axios
		
		since it is not working for my system I will use --
			
			yarn add axios
			
--------------------------------------------------------------------------------------------------------------------
In WelcomeComponent.jsx

		export default WelcomeComponent;
		function WelcomeComponent() {
			const {username} = useParams();
			function callHelloWorldRestApi(){
				axios.get('http://localhost:8080/hello-world')
					.then(  (response) => successfulResponse(response)  )
					.catch( (error) => errorResponse(error)  )
					.finally(   () => console.log('cleanup')  )
			}
			function successfulResponse(response){	console.log(response)	}
			function errorResponse(error){	console.log(error)	}
			return(
				<div className="WelcomeComponent">
					<h1>Welcome {username}</h1>
					<div>Manage Your Todos <Link to='/todos'>Go Here</Link></div>
					<div>
						<button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>Call Hello World</button>
					</div>
				</div>
			)
		}
		
In RestfulWebServicesApplication.java

		public class RestfulWebServicesApplication {
			public static void main(String[] args) {
				SpringApplication.run(RestfulWebServicesApplication.class, args);
			}
			//http://localhost:3000/ to 8080
			//Cross Origin Requests
			//Allow all requests only from 3000
			//Ctrl+Shift+t -> Search 'WMC' and select the interface 'WebMvcConfigurer'
			@Bean
			public WebMvcConfigurer corsConfigurer() {
				return new WebMvcConfigurer() {
					public void addCorsMappings(CorsRegistry registry) {
						registry.addMapping("/**")
							.allowedMethods("*")
							.allowedOrigins("http://localhost:3000");
					}
				};
			}
		}
--------------------------------------------------------------------------------------------------------------------
In WelcomeComponent.jsx 

		function WelcomeComponent() {
			const {username} = useParams();
			const [message, setMessage] = useState(null)
			function callHelloWorldRestApi(){
				axios.get('http://localhost:8080/hello-world')
					.then(  (response) => successfulResponse(response)  )
					.catch( (error) => errorResponse(error)  )
					.finally(   () => console.log('cleanup')  )
			}
			function callHelloWorldBean(){
				axios.get('http://localhost:8080/hello-world-bean')
					.then(  (response) => successfulResponse(response)  )
					.catch( (error) => errorResponse(error)  )
					.finally(   () => console.log('cleanup')  )
			}
			function successfulResponse(response){
				//setMessage(response.data)
				console.log(response)
				console.log(response.data)
				console.log(response.data.message)
			}
			function errorResponse(error){
				//setMessage(error)
				console.log(error)
			}
			return(
				<div className="WelcomeComponent">
					<h1>Welcome {username}</h1>
					<div>Manage Your Todos <Link to='/todos'>Go Here</Link></div>
					<div>
						<button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>Call Hello World</button>
					</div>
					<div>
						<button className="btn btn-success m-5" onClick={callHelloWorldBean}>Call Hello World Bean</button>
					</div>
					<div className="text-info">{message}</div>
				</div>
			)
		}
--------------------------------------------------------------------------------------------------------------------
In WelcomeComponent.jsx

	function callHelloWorldRestApi(){
    //     axios.get('http://localhost:8080/hello-world')
    //         .then(  (response) => successfulResponse(response)  )
    //         .catch( (error) => errorResponse(error)  )
    //         .finally(   () => console.log('cleanup')  )
    // }
    // function callHelloWorldBean(){
        axios.get('http://localhost:8080/hello-world-bean')
            .then(  (response) => successfulResponse(response)  )
            .catch( (error) => errorResponse(error)  )
            .finally(   () => console.log('cleanup')  )
    }
--------------------------------------------------------------------------------------------------------------------
In src\components\todo\api\HelloWorldApiService.js

	import axios from "axios";
	// export function retriveHelloWorldBean(){
	//     return axios.get('http://localhost:8080/hello-world-bean')
	// }
	export const retriveHelloWorldBean = () =>  axios.get('http://localhost:8080/hello-world-bean');
	
In WelcomeComponent.jsx 

	function callHelloWorldRestApi(){
        retriveHelloWorldBean()
            .then(  (response) => successfulResponse(response)  )
            .catch( (error) => errorResponse(error)  )
            .finally(   () => console.log('cleanup')  )
    }
--------------------------------------------------------------------------------------------------------------------
In HelloWorldApiService.js

	export const retriveHelloWorldPathVariable 
        = (username) =>  axios.get(`http://localhost:8080/hello-world/path-variable/${username}`)

        // using ` because we want to repalce ${username} with username
		
In WelcomeComponent.jsx

	function callHelloWorldRestApi(){

        // axios.get('http://localhost:8080/hello-world')
        //     .then(  (response) => successfulResponse(response)  )
        //     .catch( (error) => errorResponse(error)  )
        //     .finally(   () => console.log('cleanup')  )

        // retriveHelloWorldBean()
        //     .then(  (response) => successfulResponse(response)  )
        //     .catch( (error) => errorResponse(error)  )
        //     .finally(   () => console.log('cleanup')  )

        retriveHelloWorldPathVariable('Rachit')
            .then(  (response) => successfulResponse(response)  )
            .catch( (error) => errorResponse(error)  )
            .finally(   () => console.log('cleanup')  )
    }
--------------------------------------------------------------------------------------------------------------------
In /restful-web-services/src/main/java/com/practice/rest/webservices/restfulwebservices/todo/TodoResource.java

	@RestController
	public class TodoResource {
		private TodoService todoService;
		public TodoResource(TodoService todoService) {
			this.todoService=todoService;
		}
		@GetMapping("/users/{username}/todos")
		public List<Todo> retrieveTodos(@PathVariable String username) {
			return todoService.findByUsername(username);
		}
	}
--------------------------------------------------------------------------------------------------------------------
In src\components\todo\api\TodoApiService.js

	import axios from "axios";
	const apiClient = axios.create(
		{
			baseURL: 'http://localhost:8080'
		}
	)
	export const retriveAllTodosForUsername
			= (username) =>  apiClient.get(`/users/${username}/todos`)

In ListTodosComponent.jsx

	// const today = new Date ()
    // const targetDate = new Date (today.getFullYear()+2 , today.getMonth(), today.getDay())
    const [todos, setTodos] =  useState([])
    // const todos = [
    //             {id: 1, description: 'Learn AWS', done: false, targetDate:targetDate },
    //             {id: 2, description: 'Learn Full Stack Dev' , done: false, targetDate:targetDate },
    //             {id: 3, description: 'Learn DevOps' , done: false, targetDate:targetDate }
    //         ]

    useEffect(
        () => {refreshTodos()},[]
    )
    function refreshTodos(){
        retriveAllTodosForUsername('Rachit')
            .then( response => {
                // console.log(response) 
                setTodos(response.data)
            })
            .catch( (error) => console.log(error)  )
    }
	
	// In return, table body -->
										{/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
--------------------------------------------------------------------------------------------------------------------
In TodoResource.java
	
		@GetMapping("/users/{username}/todos/{id}")
		public Todo retrieveTodo(@PathVariable String username, @PathVariable int id) {
			return todoService.findById(id);
		}
		
		@DeleteMapping("/users/{username}/todos/{id}")
		public ResponseEntity<Void> deleteTodo(@PathVariable String username, @PathVariable int id) {
			todoService.deleteById(id);
			return ResponseEntity.noContent().build();
		}
		
In TodoApiService.js
	
	export const deleteTodoApi
        = (username,id) =>  apiClient.delete(`/users/${username}/todos/${id}`)
		
In ListTodosComponent.jsx

	function ListTodosComponent() {
		const [todos, setTodos] =  useState([])
		const [message, setMessage] =  useState(null)
		useEffect(
			() => {refreshTodos()},[]
		)
		function refreshTodos(){
			retriveAllTodosForUsernameApi('Rachit')
				.then( response => {
					setTodos(response.data)
				})
				.catch( (error) => console.log(error)  )
		}
		function deleteTodo(id){
			console.log(id);
			deleteTodoApi('Rachit',id)
				.then(
					() => {
						setMessage(`Delete of Todo with Id = ${id} is successful`);
						refreshTodos()
					}
					//1. Display success message
					//2. Update Todos List
				)
				.catch( (error) => console.log(error)  )
		}
		return(
			<div className="container">
				<h1>Things you want to Do!</h1>
				{message && <div className="alert alert-warning">{message}</div>}
				<div>
					<table className="table">
						<thead>
							<tr>
								<th>Description</th>
								<th>Is Done ?</th>
								<th>Target Date</th>
								<th>Delete</th>
							</tr>
						</thead>
						<tbody>
							{ 
								todos.map(
									todo => (
										<tr key = {todo.id} >
											<td>{todo.description}</td>
											<td>{todo.done.toString()}</td>
											{/* <td>{todo.targetDate.toDateString()}</td> */}
											<td>{todo.targetDate.toString()}</td>
											<td><button className="btn btn-warning" 
													onClick ={() => deleteTodo(todo.id)} >Delete</button></td>
										</tr>
									)
								)
							}
						</tbody>
					</table>
				</div>
			</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------
In TodoApiService.js
	
	export const retrieveTodoApi
        = (username,id) =>  apiClient.get(`/users/${username}/todos/${id}`)


In AuthContext.js

	export default function AuthProvider( { children } ){
		//3: Put some state in the context
		const [isAuthenticated, setAuthenticated] = useState(false)
		const [username, setUsername] = useState(null)
		function login (username, password){
			if(username==='rachit' && password==='rachit'){
				setAuthenticated(true)
				setUsername(username)
				return true 
			}
			else {
				setAuthenticated(false)
				setUsername(null)
				return false;
			}
		}
		function logout (){
			setAuthenticated(false)
		}
		return (
			<AuthContext.Provider value = { {isAuthenticated, login, logout, username} }>
				{ children }
			</AuthContext.Provider>
		)
	}

In TodoApp.jsx

						<Route path ='/todo/:id' element={
                            <AuthenticatedRoute>
                                <TodoComponent />
                            </AuthenticatedRoute> } />

ListTodosComponent.jsx

	export default ListTodosComponent;
	function ListTodosComponent() {
		const [todos, setTodos] =  useState([])
		const [message, setMessage] =  useState(null)
		const authContext = useAuth()
		const username = authContext.username
		const navigate = useNavigate()
		useEffect(
			() => {refreshTodos()},[]
		)
		function refreshTodos(){
			retriveAllTodosForUsernameApi(username)
				.then( response => {
					setTodos(response.data)
				})
				.catch( (error) => console.log(error)  )
		}
		function deleteTodo(id){
			console.log(id);
			deleteTodoApi(username,id)
				.then(
					() => {
						setMessage(`Delete of Todo with Id = ${id} is successful`);
						refreshTodos()
					}
					//1. Display success message
					//2. Update Todos List
				)
				.catch( (error) => console.log(error)  )
		}
		function updateTodo(id){
			console.log(id);
			navigate(`/todo/${id}`)
		}
		return(
			<div className="container">
				<h1>Things you want to Do!</h1>
				{message && <div className="alert alert-warning">{message}</div>}
				<div>
					<table className="table">
						<thead>
							<tr>
								<th>Description</th>
								<th>Is Done ?</th>
								<th>Target Date</th>
								<th>Delete</th>
								<th>Update</th>
							</tr>
						</thead>
						<tbody>
							{ 
								todos.map(
									todo => (
										<tr key = {todo.id} >
											<td>{todo.description}</td>
											<td>{todo.done.toString()}</td>
											{/* <td>{todo.targetDate.toDateString()}</td> */}
											<td>{todo.targetDate.toString()}</td>
											<td><button className="btn btn-warning" 
													onClick ={() => deleteTodo(todo.id)} >Delete</button></td>
											<td><button className="btn btn-success" 
													onClick ={() => updateTodo(todo.id)} >Update</button></td>
										</tr>
									)
								)
							}
						</tbody>
					</table>
				</div>
			</div>
		)
	}
		
		
src\components\todo\TodoComponent.jsx

	export default function TodoComponent(){
		const {id} = useParams()
		const [description, setDescription] = useState('')    
		const authContext= useAuth()
		const username = authContext.username
		useEffect(
			() => retrieveTodos(),
			[id]
			//the second value([id]) defines when the refresh takes place, 
			//here, it will happen when id changes
		)
		function retrieveTodos(){
			retrieveTodoApi(username,id)
				.then(response => {
					setDescription(response.data.description)
				})
				.catch(error => console.log(error))
		}
		return(
			<div className="container">
				<h1>Enter Todo Details</h1>
				<div>
					description: {description}
				</div>
			</div>
		)
	}
	
--------------------------------------------------------------------------------------------------------------------
Add the libraries -- 

	yarn add formik
	
	yarn add moment
	
In TodoComponent.jsx

	export default function TodoComponent(){
		const {id} = useParams()
		const [description, setDescription] = useState('')    
		const [targetDate, setTargetDate] = useState('')    
		const authContext= useAuth()
		const username = authContext.username
		useEffect(
			() => retrieveTodos(),[id]
		)
		function retrieveTodos(){
			retrieveTodoApi(username,id)
				.then(response => {
					setDescription(response.data.description)
					setTargetDate(response.data.targetDate)
				})
				.catch(error => console.log(error))
		}
		function onSubmit(values){
			console.log(values)
		}
		function validate(values){
			let errors={
				// description:'Enter a valid description',
				// targetDate:'Enter a valid target date'
			}
			if (values.description.length<5){
				errors.description='Enter atleast 5 characters'
			}   
			if (values.targetDate == null || values.targetDate == ''){
				errors.description='Enter targetDate'
			} 
			console.log(values)
			return errors
		}
		return(
			<div className="container">
				<h1>Enter Todo Details</h1>
				<div>
					<Formik initialValues={ {description, targetDate} } 
						enableReinitialize = {true}
						onSubmit={onSubmit}
						validate={validate}
						validateOnChange={false}
						validateOnBlur={false}
					>
					{
						(props) => (
							<Form>
								<ErrorMessage 
									name="description"
									component="div"
									className="alert alert-warning"
								/>
								<ErrorMessage 
									name="targetDate"
									component="div"
									className="alert alert-warning"
								/>
								<fieldset className="form-group">
									<label>Description</label>
									<Field type="text" className="form-control m-1" name = "description" />
								</fieldset>
								<fieldset className="form-group">
									<label>Target Date</label>
									<Field type="date" className="form-control m-1" name = "targetDate" />
								</fieldset>
								<div>
									<button className="btn btn-success m-5" type="submit">Save</button>
								</div>
							</Form>
						)
					}
					</Formik>
				</div>
			</div>
		)
	}
--------------------------------------------------------------------------------------------------------------------