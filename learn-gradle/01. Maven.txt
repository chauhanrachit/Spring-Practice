What is Maven?

	Things you do when writing code each day:
		Create new projects
		Manages dependencies and their versions
			Spring, Spring MVC, Hibernate,...
			Add/modify dependencies
		Build a JAR file
		Run your application locally in Tomcat or Jetty or ..
		Run unit tests
		Deploy to a test environment
		and a lot more..
		
	Maven helps you do all these and more...
	
--------------------------------------------------------------------------------------------------------------------------

Exploring Project Object Model - pom.xml

	Let's explore Project Object Model - pom.xml
		1: Maven dependencies: Frameworks & libraries used in a project
			Ex: spring-boot-starter-web and spring-boot-starter-test
			Why are there so many dependencies in the classpath?
			Answer: Transitive Dependencies
			(REMEMBER) Spring dependencies are DIFFERENT
			
		2: Parent Pom: spring-boot-starter-parent
			Dependency Management: spring-boot-dependencies
			Properties: java.version, plugins and configurations
			
		3: Name of our project: groupId + artifactId
			1: groupId: Similar to package name
			2: artifactId: Similar to class name
				Why is it important?
					Think about this: How can other projects use our new project?
					
	Activity: help:eective-pom, dependency:tree & Eclipse UI
		Let's add a new dependency: spring-boot-starter-web
	
--------------------------------------------------------------------------------------------------------------------------

Exploring Maven Build Life Cycle
	
	When we run a maven command, maven build life cycle is used
	
	Build LifeCycle is a sequence of steps
		Validate
		Compile
		Test
		Package
		Integration Test
		Verify
		Install
		Deploy	
	
--------------------------------------------------------------------------------------------------------------------------

How does Maven Work?

	Maven follows Convention over Configuration
		Pre defined folder structure
		Almost all Java projects follow Maven structure (Consistency)
		
	Maven central repository contains jars (and others) indexed by artifact id and group id
		Stores all the versions of dependencies
		repositories > repository
		pluginRepositories > pluginRepository
		
	When a dependency is added to pom.xml, Maven tries to download the dependency
		Downloaded dependencies are stored inside your maven local repository
		Local Repository : a temp folder on your machine where maven stores the jar and dependency files that are 
						   downloaded from Maven Repository.
		
--------------------------------------------------------------------------------------------------------------------------
	
Important Maven Commands

	mvn --version
	mvn compile: Compile source files
	mvn test-compile: Compile test files
		OBSERVCE CAREFULLY: This will also compile source files
	mvn clean: Delete target directory
	mvn test: Run unit tests
	mvn package: Create a jar
	mvn help:eective-pom
	mvn dependency:tree
	
--------------------------------------------------------------------------------------------------------------------------

Spring Boot Maven Plugin

	Spring Boot Maven Plugin: Provides Spring Boot support in Apache Maven
		Example: Create executable jar package
		Example: Run Spring Boot application
		Example: Create a Container Image
		Commands:
			mvn spring-boot:repackage (create jar or war)
			Run package using java -jar
			mvn spring-boot:run (Run application)
			mvn spring-boot:start (Non-blocking. Use it to run integration tests.)
			mvn spring-boot:stop (Stop application started with start command)
			mvn spring-boot:build-image (Build a container image)
	
--------------------------------------------------------------------------------------------------------------------------

How are Spring Releases Versioned?
	
	Version scheme - MAJOR.MINOR.PATCH[-MODIFIER]
		MAJOR: Significant amount of work to upgrade (10.0.0 to 11.0.0)
		MINOR: Little to no work to upgrade (10.1.0 to 10.2.0)
		PATCH: No work to upgrade (10.5.4 to 10.5.5)
		MODIFIER: Optional modifier
			Milestones - M1, M2, .. (10.3.0-M1,10.3.0-M2)
			Release candidates - RC1, RC2, .. (10.3.0-RC1, 10.3.0-RC2)
			Snapshots - SNAPSHOT
			Release - Modifier will be ABSENT (10.0.0, 10.1.0)
			
	Example versions in order:
		10.0.0-SNAPSHOT, 10.0.0-M1, 10.0.0-M2, 10.0.0-RC1, 10.0.0-RC2, 10.0.0, ...
		
	RECOMMENDED:
		Avoid SNAPSHOTs
		Use ONLY Released versions in PRODUCTION
		
--------------------------------------------------------------------------------------------------------------------------	