
In SayHelloController.java-

@Controller							//To tell spring that this is a bean, and this is a web-ui related component 
@RequestMapping("say-hello")		//used to map with the specified parameters , which comes after the main component of the URl
@ResponseBody						//returns whatever is returned by the method, as is to the browser

--------------------------------------------------------------------------------------------------------------------------

For Using View(In this case JSP)-

	@RequestMapping("say-hello-jsp")
	//@ResponseBody  //this will return whatever is written directly. So, as we want to redirect to a view (JSP), we will remove it.
	public String sayHelloJsp() {
		return "sayHello";
	}

Usual path of JSP files
myfirstwebapp/src/main/resources/META-INF/resources/WEB-INF/jsp/

Entries in application.properties(#-comment) - 

	#spring.mvc.view.prefix=/src/main/resources/META-INF/resources/WEB-INF/jsp/
	#Spring knows the path upto META-INF/resources, so the path we have to give becomes - 
	spring.mvc.view.prefix=/WEB-INF/jsp/
	spring.mvc.view.suffix=.jsp
	
	--
	#added to get logs of org.springframework level 
	logging.level.org.springframework=debug
	logging.level.com.practice.springboot.myfirstwebapp=debug
	
	#lggoing levels - trace>debug>info>warn>error
	
	
	In Java file for logging with slf4j Logger, Ex -
	
	private Logger logger = LoggerFactory.getLogger(getClass());
	logger.info("Request Param is - {}", name);		//{} - will get replaced by the variable name
	
--------------------------------------------------------------------------------------------------------------------------


	@RequestMapping("login")
	public String gotoLoginPage(@RequestParam String name, ModelMap model) {
		//ModelMap is used to pass what is received from Requestparam to the view (JSP)
		model.put("name", name);
		System.out.println("Request Param is - " + name);
		return "login";
	}
	
	ModelMap - 	//ModelMap is used to pass what is received from Requestparam to the view (JSP)
		Ex -  	// putting a value in ModelMap -- model.put("name", name);
	@RequestParam  - Used to receive parameters from the URL of the browser
		Ex - 	//http://localhost:8080/login?name=Rachit
		
		
	To access what is passed in the model map in JSP, Expression Language(EL) is used
	
	Ex- 
	
	<html>
		<head>
			<title>Login Page</title>
		</head>
		<body>
			Welcome to the Login Page ${name}!
		</body>
	</html>
	
--------------------------------------------------------------------------------------------------------------------------
	
	//login
	//GET,POST both are being handled by this method, if we want it to only handle GET method---
	@RequestMapping(value="login",method = RequestMethod.GET)
	public String gotoLoginPage() {
		//model.put("name", name);
		return "login";
	}
	
	@RequestMapping(value="login",method = RequestMethod.POST)
	public String gotoWelcomePage(@RequestParam String name,@RequestParam String password, ModelMap model) {
		model.put("name", name);
		model.put("password", password);
		return "welcome";
	}
	
	--
	
	changes in body of login.jsp
	
	<body>
		Welcome to the Login Page !
		<form method ="post">
			Name: <input type ="text" name="name">
			Password: <input type ="password" name="password">
			<input type = "submit">
		</form>
	</body>
	
	welcome.jsp -
	
	<html>
		<head>
			<title>Welcome Page</title>
		</head>
		<body>
			<div>Welcome to Welcome Page !</div>
			<div>Your Name 	   is -  ${name} 	 !</div>
			<div>Your Password is -  ${password} !</div>		
		</body>
	</html>
--------------------------------------------------------------------------------------------------------------------------
	
Setting Up Todo class -

	Todo.java
	
		private int id;
		private String username;
		private String description;
		private LocalDate targateDate;
		private boolean done;
		
		main variables of Todo Application
		
	TodoService.java
		
		Creating Static list of Todo.java, and creating Static Block to initialize Static Variable
		
		public List<Todo> findByUsername ( String username){
			return todos;
		}
		
	TodoController.java
	
		private TodoService todoService;
		public TodoController(TodoService todoService) {
			super();
			this.todoService = todoService;
		}
		@RequestMapping("list-todos")
		public String listAllTodos(ModelMap model) {
			List<Todo> todos=todoService.findByUsername("Rachit");
			model.addAttribute("todos",todos);	
			return "listTodos";
		}
		
		listTodos.JSP
		
		<html>
			<head>
				<title>List Todos Page</title>
			</head>
			<body>
				<div>Welcome to Welcome Page !</div>
				<div>Your Todos are   ${todos} 	 !</div>
				<!--<div>Your Password is -  ${password} !</div> -->	
			</body>
		</html>
		

	DIfference Between Request, Model, Session
	
		Request	- 	The data entered by the user (Visible in the Payload of Network tab of Inspect), is only valid for that specific 
				  	request, i.e., after that request the data does not move forward in the payload, it is removed from the payload 
				  	of the next REQUEST.
				  	
		Model	-	Whenever a value is put in model, it is only available in the scope of that request.
					Ex - If we are putting data in a model and showing it to the user through the Jsp, and if the user is sending 
					any request, and a new jsp is opened, that data which was shown through model, will not be available.
					
		Session	-	@SessionAttributes("name")
					Written above the class, it makes the field specified across the server, but in which ever class this field is 
					required, @SessionAttributes("name") annotation will need to be specified for that class as well.
					
					
----------------------------------------------------------------------------------------------------------------------------------
Added in pom.xml for JSPs --

		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>org.glassfish.web</groupId>
		    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
		</dependency>
		
	Added in jsp files - 
		
		<%@ taglib prefix="c" uri="jakarta.tags.core" %>
		
		Using the library --
		
		<table>
			<thead>
				<tr>
					<th> Id </th>
					<th> Description </th>
					<th> Targate Date </th>
					<th> Is Done ? </th>
				</tr>
			</thead>
			<tbody>
				<c:forEach items = "${todos}" var = "todo">
					<tr>
						<td>${todo.id}</td>
						<td>${todo.description}</td>
						<td>${todo.targateDate}</td>
						<td>${todo.done}</td>
					</tr>
				</c:forEach>
			</tbody>
		</table>
		
-------------------------------------------------------------------------------------------------------------------

Setting Up BootStrap for the project - 

	In pom.xml add the dependencies - 
	
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>5.1.3</version>
		</dependency>
		
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.6.0</version>
		</dependency>
		
	In the Jsp file, CSS is added in the beginning, and JavaScript is added at the end of the body  -
	
		<%@ taglib prefix="c" uri="jakarta.tags.core" %>
		<html>
			<head>
				<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet" >
				<title>List Todos Page</title>
			</head>
			-
			-
			-
				<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
				<script src="webjars/jquery/3.6.0/jquery.min.js"></script>
			</body>
		</html>
		


					 

