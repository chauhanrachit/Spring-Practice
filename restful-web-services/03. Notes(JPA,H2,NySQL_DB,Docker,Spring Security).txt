JPA, H2 Database Connection 

	In pom.xml
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
	
	In appliation.properties -

		spring.h2.console.enabled=true
		#To enable H2 DB console
		
		spring.datasource.url=jdbc:h2:mem:test
		#H2 will make dynamic URL, each time the server starts, we don't want that, we want a static URL, as defined above.
	
	Creating An Entity for our User class, we want JPA to manage this class, and the way we can tell JPA 
	to manage this class is by adding @Entity annotation to User class.
	Add @Id annotation to Id in the User class, as it is an identifier. 
	@GeneratedValue Annotation at ID for automatically generating ID
	
	Set @Entity to - @Entity(name = "User_details")
	Because by default H2 would have made table by the name of User, which is a keyword,& that will result in an error.
	
	While trying to add data to H2 DB, through data.sql(present in resources), we are getting an error -
		Table "USER_DETAILS" not found
	Because data.sql is getting executed before the creation of the table, so we want to delay data.sql execution. 
	For this issue, in application.properties, add -
		spring.jpa.defer-datasource-initialization=true
		
--------------------------------------------------------------------------------------------------------------------------

	Create A UserRepository interface which extends JpaRepository<User, Integer> 
		Here <>, First is the Entity Name, Second is the DataType of Primary Key.
	
	Create a copy of UserResource.java, rename it to UserJpaResource.java, in all the url make changes, (/users -> /jpa/users)
		
		Create an object of the UserRepository interface, and autowire it through constructor.
		
			@GetMapping("/jpa/users")
			public List<User> retrieveAllUsers(){
				return repository.findAll();
			}
			
			Create a default constructor in User.java, without which we will get error from the above URL
			
			In user.java-
				
				@GetMapping("/jpa/users")
				public List<User> retrieveAllUsers(){
					return repository.findAll();
				}
				@GetMapping("/jpa/users/{id}")
				public EntityModel<User> retrieveUser(@PathVariable int id){
					Optional<User> user = repository.findById(id);
					if(user.isEmpty())
						throw new UserNotFoundException("id:"+id);
					EntityModel<User> entityModel = EntityModel.of(user.get());
					WebMvcLinkBuilder link = linkTo(methodOn(this.getClass()).retrieveAllUsers());
					entityModel.add(link.withRel("all-users"));
					return entityModel;
				}
				@PostMapping("/jpa/users")
				public ResponseEntity<User> createUser(@Valid @RequestBody User user) {
						User savedUser = repository.save(user);
						URI location = ServletUriComponentsBuilder.fromCurrentRequest()
										.path("/{id}")
										.buildAndExpand(savedUser.getId())
										.toUri(); 
						return ResponseEntity.created(location).build();
				}
				@DeleteMapping("/jpa/users/{id}")
				public void deleteUser(@PathVariable int id){
					repository.deleteById(id);
		
--------------------------------------------------------------------------------------------------------------------------
For handling Posts of Each User - 

	Create Post.java(@Entity) class in jpa package --
	
		protected Post() {}
		
		@Id
		@GeneratedValue
		private Integer id;
		
		@Size(min = 10 )
		private String description;
		
		//In here the relationship is opposite of what is defined in User Entity
		//fetch attribute here decides whether the association should  be lazily loaded or eagerly fetched
		@ManyToOne(fetch = FetchType.LAZY)
		@JsonIgnore
		private User user;
		
		public Post(Integer id, String description) {
			super();
			this.id = id;
			this.description = description;
		}
		//Getters, Setters, toString Method below this
	
	Changes in User.java --
	
		//We want to have user and relationship with the posts.So, the user has what kind of relation with Post=
		//Since a single user can have multiple posts, -- One to Many Relationship
		//mappedBy -> which field in Post entity owns this relationship (here, User user)
		@OneToMany(mappedBy = "user")
		@JsonIgnore
		private List<Post> posts;
		//We are using User Bean as part of our REST API responses, and we'll also be using Post Bean as part of our REST API 
		//responses as well. And, we don't want Post to be part of the JSON Responses for the User Bean.
		//That's why we would add @JsonIgnore in here.
		
		public List<Post> getPosts() {
			return posts;
		}
		public void setPosts(List<Post> posts) {
			this.posts = posts;
		}
		
	Changes in UserJpaResource.java -
	
		private UserRepository userRepository;
		private PostRepository postRepository;
	
		public UserJpaResource(UserRepository userRepository, PostRepository postRepository) {
			this.userRepository = userRepository;
			this.postRepository = postRepository;
		}
		
		@GetMapping("/jpa/users/{id}/posts")
		public List<Post> retrievePostsForUser(@PathVariable int id) {
			Optional<User> user = userRepository.findById(id);
			if (user.isEmpty())
				throw new UserNotFoundException("id:" + id);
			return user.get().getPosts();
		}
	
		@PostMapping("/jpa/users/{id}/posts")
		public ResponseEntity<Post> createPostForuser(@Valid @RequestBody Post post, @PathVariable int id) {
			Optional<User> user = userRepository.findById(id);
			if (user.isEmpty())
				throw new UserNotFoundException("id:" + id);
	
			post.setUser(user.get());
	
			Post savedPost = postRepository.save(post);
	
			URI location = ServletUriComponentsBuilder
					.fromCurrentRequest()
					.path("/{id}")
					.buildAndExpand(savedPost.getId())
					.toUri();
			return ResponseEntity.created(location).build();
		}
		
		@GetMapping("/jpa/users/{id}/posts/{postId}")
		public EntityModel<Post> retrieveSinglePostForUser(@PathVariable int id,@PathVariable int postId) {
			Optional<User> user = userRepository.findById(id);
			if (user.isEmpty())
				throw new UserNotFoundException("UserId:" + id);
			
			Optional<Post> post = postRepository.findById(postId);
			if ((post.isEmpty())||(post.get().getUser().getId()!=id))
				throw new PostNotFoundException("PostId:" + postId);
			
			EntityModel<Post> entityModel = EntityModel.of(post.get());
			WebMvcLinkBuilder link = linkTo(methodOn(this.getClass()).retrievePostsForUser(id));
			entityModel.add(link.withRel("all-posts-for-this-user"));
			return entityModel;
		}
	
	For throwing the Error PostNotFoundException, create class PostNotFoundException in user package
		Inside PostNotFoundException.java -
		
			// getting -- There was an unexpected error (type=Internal Server Error, status=500).
			//Typically when a resource is not found we want the error code 404
			//For that @ResponseStatus(code = HttpStatus.NOT_FOUND) annotation
			@ResponseStatus(code = HttpStatus.NOT_FOUND)
			public class PostNotFoundException extends RuntimeException {
				public PostNotFoundException(String message) {
					super(message);
				}
			}
			
	In exception package, for changing the received error at user end from 500(Internal Server Error) to 404(NOT_FOUND)
	In CustomizedResponseEntityExceptionHandler.java -
		
		@ExceptionHandler(PostNotFoundException.class)
		public final ResponseEntity<ErrorDetails> handlePostNotFoundException(Exception ex, WebRequest request) 
																								throws Exception {
			ErrorDetails errorDetails = new ErrorDetails(LocalDateTime.now(), 
																ex.getMessage(), 
																request.getDescription(false));
			return new ResponseEntity<ErrorDetails>(errorDetails, HttpStatus.NOT_FOUND);
		}
	
--------------------------------------------------------------------------------------------------------------------------

Switching From H2 DB to MySQL DB - 
	
	In command Prompt run Docker MySql Query 
	
		docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=social-media-user 
		--env MYSQL_PASSWORD=dummypassword --env MYSQL_DATABASE=social-media-database --name mysql 
		--publish 3306:3306 mysql:8-oracle
		
	But since there is already one docker present in my device, changing the above command to - 
		
		docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=social-media-user 
		--env MYSQL_PASSWORD=dummypassword --env MYSQL_DATABASE=social-media-database --name mysql_1 
		--publish 3307:3306 mysql:8-oracle
		
	By using --publish 3307:3306, we specified:
		MySQL inside the container will still run on port 3306 (default for MySQL).
		Requests to port 3307 on the host machine are forwarded to port 3306 inside the container.

	Details of Above Command-

	docker 
		run 
			--detach 
				--env MYSQL_ROOT_PASSWORD=dummypassword 
				--env MYSQL_USER=social-media-user 
				--env MYSQL_PASSWORD=dummypassword 
				--env MYSQL_DATABASE=social-media-database 
				--name mysql_1 
				--publish 3307:3307 mysql:8-oracle
	
	--name mysql_1  	-> Given Name of the container
	--env 				-> Environment Details 
	--publish 3307:3307	-> Port to Publish the container on 
	mysql:8-oracle		-> Is the name of the image, mysql:8-oracle is the complete nameand the version of this MySQL image
						   The specific tag 8-oracle of MySQL can run on any Operating System

	use command -
	
		docker container ls
		
		To get all the running containers in cmd prompt, or open docker application where it is also visible.
		
	In application.properties - 
	
		#spring.datasource.url=jdbc:h2:mem:testdb
		spring.datasource.url=jdbc:mysql://localhost:3307/social-media-database
		spring.datasource.username=social-media-user
		spring.datasource.password=dummypassword
		
		#When connecting with an In-memory DB like H2, SpringBoot auto-configuration will directly look at the entities 
		#and create the table. However, SpringBoot auto-configuration will not create the tables if we are using a DB 
		#like MySQL. We want SpringBoot auto-configuration to create all the table for us. SO we will use --
		
		spring.jpa.hibernate.ddl-auto=update
		
		#This would ensurethat at the start of the application, based on the entities which are present, the database 
		#schema will be updated.
		
		#To configure the dialect to use
		
		spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
		
		# To get the dialect press ctrl+shift+t, search MySQLDialect, open it copy the qualified name of the class.
		
	In pom.xml - 
		
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
		</dependency>
		
	Google mysqlsh, and download it to execute mysql through cmd prompt
	
		mysqlsh commands -
		
			mysqlsh
			\connect social-media-user@localhost:3307
			\sql
			use social-media-database
			select * from user_details;
			select * from post;
			\quit			

--------------------------------------------------------------------------------------------------------------------------

Right Now, anyone can access our RESTAPIs, which is not good. We need to add Spring Security to it now.

	In pom.xml

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
	
	Now, we need to use username and passowrd to access the REST API, 
		
		UserName - user
		PassWord - NEw password is genetrated each time the server is started, which is not good. So --
		
		In application.properties -
		
			spring.security.user.name=username
			spring.security.user.password=password

	Whenever we send a request, spring security intercepts that request, and it will execute a series of filters.
	These Filters are called Filter Chains

		There are a series of check which are done in a filter chain.-
			
			1. All requests should be authenticated.So there should be credentials that are attached with all the requests.
			2. If a request is not authenticated (or does not have credentials) then by default a web page is shown.
			3. One of the things that is done as part of the Filter Chain is to enable a check for something called CSRF
				(Cross Site Request Forgery), and it will impact our POST & PUT Requests.
			And there a lot of other things that are done as part of the Filter Chain.
		
	What we want to do is, customize the Filter Chain. There are two things we want to modify in the existing Filter Chain. -
		1. That there is a web page being shown. Showing a sign in page is good for Web Applications.However, for RESTAPIs
			we would want something called HTTP basic authentication. And when we are making use of HTTP authentication,
			what happens typically when we type in the URL, a pop up needs to come up and ask for user credentials. 
			
		2. We want to disable CSRF, so that we can send POST Requests.
	
	In Spring Security, if we want to override the existing Filter Chain, then we would need to define the entire chain again.
	
	We will create a sring configuration file, where we will create a bean, where we would define a Filter Chain, 
	and all the steps as part of our Filter Chain.
	
	Create SpringSecurity.java --
		package com.practice.rest.webservices.restfulwebservices.security;

		import static org.springframework.security.config.Customizer.withDefaults;
		//This class would contain  spring beans directly created.So, this is Spring Configuration
		@Configuration
		public class SpringSecurityConfiguration {
			
			@Bean
			public SecurityFilterChain filterChain (HttpSecurity http) throws Exception {
		//		1. Authenticate all request
				http.authorizeHttpRequests(
						auth -> auth.anyRequest().authenticated()
						);
				
		//		2. If request not authenticated, show a login web page
				http.httpBasic(withDefaults());
				//For the withDefaults() method, search for class Customizer (ctrl,shift,t), it should be in the package -
				// (org.springframework.security.config). From there copy the qualified name of the withDefaults() method and 
				//since the function is static, do a static import.
				
		//		3. Disable CSRF
				http.csrf().disable();
				return http.build();
			}
		}
	
--------------------------------------------------------------------------------------------------------------------------
